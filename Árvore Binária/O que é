---

# üå≥ √Årvores !!

As estruturas apresentadas at√© aqui s√£o chamadas de **lineares**. A import√¢ncia dessas estruturas √© ineg√°vel, por√©m, elas **n√£o s√£o adequadas para representar dados que devem ser dispostos de maneira hier√°rquica**. A estrutura que preenche essa lacuna √© a **√°rvore**.

Uma **√°rvore** √© uma estrutura **bidimensional, n√£o linear**, que possui propriedades especiais e admite muitas opera√ß√µes de conjuntos din√¢micos, tais como:

- Consulta  
- Inser√ß√£o  
- Remo√ß√£o  
- Entre outros

> **Figura 15** - Representa√ß√£o de uma estrutura de dados √°rvore

```
        (Raiz)
          |
    +-----+-----+
    |           |
 (Filho)     (Filho)
    |           |
+---+---+     +---+
|       |     |   |
(Filho) (Filho) (Filho)
```
*Fonte: Adaptado de Ascencio (2010)*

---

## üîπ Caracter√≠sticas de √Årvores

- **N√≥ raiz**: n√≥ no topo da √°rvore, do qual descendem os demais n√≥s; √© o primeiro n√≥ da √°rvore;  
- **N√≥ interior**: n√≥ do interior da √°rvore (que possui descendentes);  
- **N√≥ terminal**: n√≥ que n√£o possui descendentes;  
- **Trajet√≥ria**: n√∫mero de n√≥s que devem ser percorridos at√© o n√≥ determinado;  
- **Grau do n√≥**: n√∫mero de n√≥s descendentes do n√≥, ou seja, o n√∫mero de sub√°rvores de um n√≥;  
- **Grau da √°rvore**: n√∫mero m√°ximo de sub√°rvores de um n√≥;  
- **Altura da √°rvore**: n√∫mero m√°ximo de n√≠veis dos seus n√≥s.

> **Figura 16** - Elementos de uma √°rvore

```
        (A) <- Raiz
        / \
     (B) (C) <- N√≥s interiores
     / \
  (D) (E) <- N√≥s terminais (folhas)
```

---

Podemos utilizar **√°rvores bin√°rias** para armazenamento tempor√°rio de conjuntos de elementos e podem ser implementadas com **armazenamento din√¢mico**, atrav√©s de **listas duplamente encadeadas**.

Com rela√ß√£o ao tipo, elas podem ser do tipo **listas generalizadas** ou **bin√°rias**.  
Nas √°rvores bin√°rias, cada n√≥ possui, no m√°ximo, dois filhos. Nesta Unidade, abordaremos apenas as **√°rvores bin√°rias**.

---

# üåø √Årvores Bin√°rias !!

Uma **√°rvore bin√°ria** pode ser **nula** e, assim como qualquer √°rvore, possui um elemento denominado **raiz**, e os demais elementos s√£o particionados em `T‚ÇÅ` e `T‚ÇÇ`, estruturas disjuntas de √°rvore bin√°ria.

- A **sub√°rvore da esquerda** √© denominada `T‚ÇÅ`;  
- A **sub√°rvore da direita** √© denominada `T‚ÇÇ`.

Nesse tipo de √°rvore tamb√©m existe a particularidade quanto √† **posi√ß√£o dos n√≥s**:

- Os **n√≥s da direita** sempre possuem **valor superior** aos do n√≥ pai;  
- Os **n√≥s da esquerda** sempre possuem **valor inferior** ao do n√≥ pai.

> **Figura 17** - Exemplo de √°rvore bin√°ria de busca

```
        (8)
       /   \
     (3)   (10)
     / \      \
   (1) (6)    (14)
       / \    /
     (4) (7) (13)
```

---

Para a manipula√ß√£o de √°rvore, existe uma grande similaridade com os n√≥s criados para manipular listas. Por isso, utilizaremos os mesmos princ√≠pios.

Criaremos uma classe `BTreeNo`, a qual implementa o **n√≥ da √°rvore** e cont√©m os atributos:

- `item` do tipo `int`, possibilitando manipular n√∫meros inteiros (para facilitar o entendimento da l√≥gica, mas a √°rvore pode manipular qualquer tipo de dados);  
- `esq` e `dir` do tipo `TreeNo`.

A cada novo n√≥ inserido na √°rvore, uma inst√¢ncia da classe `BTreeNo` ser√° criada, ou seja, um novo **objeto n√≥**.

> **Figura 18** - Estrutura do n√≥ da √°rvore

```python
class BTreeNo:
    def __init__(self, valor):
        self.item = valor
        self.esq = None
        self.dir = None
```

---

## ‚ûï Inserir n√≥ em uma √°rvore !!

Ap√≥s definir a estrutura do n√≥ da √°rvore, o pr√≥ximo passo √© criar a **classe √°rvore**, que ser√° instanciada toda vez que uma nova √°rvore for criada, contendo os m√©todos que possibilitem opera√ß√µes de **inser√ß√£o e exclus√£o de n√≥s**.

> **Figura 19** - M√©todos de inser√ß√£o

```python
class BTree:
    def __init__(self):
        self.raiz = None

    def inserirNo(self, valor):
        self.raiz = self.inserir(self.raiz, valor)

    def inserir(self, arvore, valor):
        if arvore is None:
            return BTreeNo(valor)
        elif valor < arvore.item:
            arvore.esq = self.inserir(arvore.esq, valor)
        else:
            arvore.dir = self.inserir(arvore.dir, valor)
        return arvore
```

### üîç Regras de Inser√ß√£o:

- Quando a √°rvore est√° **vazia**: insere o novo elemento na **raiz**;
- Quando j√° h√° elementos:
  - Se o valor a ser inserido √© **menor**, ser√° inserido √† **esquerda**;
  - Caso contr√°rio, insere-se √† **direita**;
- A **recursividade** √© utilizada para percorrer os n√≥s at√© encontrar um `null`.

---

## üì§ Exibir n√≥s de uma √°rvore !!

A partir da opera√ß√£o para exibir os valores, apresentaremos **apenas o m√©todo correspondente**, lembrando que este e os demais foram desenvolvidos no escopo da classe `BTree`.

- Assim como o m√©todo `inserirNo`, os m√©todos `exibirNoEsq` e `exibirNoDir` **n√£o recebem par√¢metros**;
- Eles chamam os m√©todos `exibirEsquerdo` ou `exibirDireito`, passando como par√¢metro o n√≥ denominado **raiz**.

### üß≠ M√©todos `exibirEsquerdo` e `exibirDireito`:

- Recebem como par√¢metro um objeto do tipo `BTreeNo`;
- S√£o chamados via `exibirNoEsq` ou `exibirNoDir`;
- Utilizam **recurs√£o** para buscar os n√≥s √† esquerda ou √† direita da √°rvore;
- O percurso termina ao encontrar um **n√≥ nulo**;
- Isso garante a **impress√£o na ordem ascendente de valor**.

---

## ‚ùå Excluir n√≥ de uma √°rvore !!

A exclus√£o de um n√≥ da √°rvore requer uma **l√≥gica mais complexa**, pois as **refer√™ncias ao n√≥ exclu√≠do e seus filhos precisam ser ajustadas**.

> Veja **Figura 22** para o processo visual.

**Figura 22 - Processo de Exclus√£o de N√≥ em √Årvore Bin√°ria**

```
ANTES DA EXCLUS√ÉO:
        (8)
       /   \
     (3)   (10)
     / \      \
   (1) (6)    (14)
       / \    /
     (4) (7) (13)

EXCLUINDO O N√ì (10):
- N√≥ com apenas um filho (14).

DEPOIS DA EXCLUS√ÉO:
        (8)
       /   \
     (3)   (14)
     / \    /
   (1) (6) (13)
       / \
     (4) (7)
```

---

### üîÅ Casos Especiais:

- Se o **pai n√£o for nulo**, o n√≥ a ser exclu√≠do **n√£o √© a raiz**;
- Se o n√≥ **n√£o possuir filho √† direita**, a refer√™ncia do pai ser√° trocada;
- O mesmo vale se **n√£o possuir filho √† esquerda**;
- Se possuir **filhos √† esquerda e √† direita**, aplica-se a **mesma l√≥gica da exclus√£o da raiz**, mas ajustando as **refer√™ncias do pai** do n√≥ a ser exclu√≠do.

> Veja o exemplo na **Figura 23**.

**Figura 23 - Ajuste de Refer√™ncia do Pai Ap√≥s Exclus√£o**

```
ANTES:
        (8)
       /   \
     (3)   (14)
     / \    /
   (1) (6) (13)
       / \
     (4) (7)

EXCLUINDO O N√ì (6):
- N√≥ com dois filhos (4 e 7).

PASSOS:
- Encontrar o menor valor na sub√°rvore direita (7);
- Substituir o 6 por 7.

DEPOIS:
        (8)
       /   \
     (3)   (14)
     / \    /
   (1) (7) (13)
    /
  (4)
```

---
